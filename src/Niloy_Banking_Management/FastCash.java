/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Niloy_Banking_Management;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Date;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Niloy Sarker
 */
public class FastCash extends javax.swing.JFrame {

    private final String accountNumber; // Assuming you have a variable to store the account number
    private final String pin;

    public FastCash(String accountNumber, String pin) {
        initComponents();
        this.accountNumber = accountNumber;
        this.pin = pin;

        jButton1.setActionCommand("500");
        jButton2.setActionCommand("1000");
        jButton3.setActionCommand("2000");
        jButton4.setActionCommand("5000");
        jButton5.setActionCommand("10000");
        jButton6.setActionCommand("15000");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(900, 800));
        setMinimumSize(new java.awt.Dimension(900, 800));
        setPreferredSize(new java.awt.Dimension(900, 800));
        getContentPane().setLayout(null);

        jButton1.setBackground(new java.awt.Color(0, 51, 102));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("500 ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(210, 360, 130, 25);

        jButton2.setBackground(new java.awt.Color(0, 51, 102));
        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("1000 ");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(210, 390, 130, 25);

        jButton3.setBackground(new java.awt.Color(0, 51, 102));
        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("2000");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(210, 420, 130, 25);

        jButton4.setBackground(new java.awt.Color(0, 51, 102));
        jButton4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("5000");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4);
        jButton4.setBounds(420, 360, 130, 25);

        jButton5.setBackground(new java.awt.Color(0, 51, 102));
        jButton5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("10000");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5);
        jButton5.setBounds(420, 390, 130, 25);

        jButton6.setBackground(new java.awt.Color(0, 51, 102));
        jButton6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setText("15000");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton6);
        jButton6.setBounds(420, 420, 130, 25);

        jButton7.setBackground(new java.awt.Color(0, 51, 102));
        jButton7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton7.setForeground(new java.awt.Color(255, 255, 255));
        jButton7.setText("EXIT");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton7);
        jButton7.setBounds(420, 450, 130, 20);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 17)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 51));
        jLabel1.setText("Select Your Withdrwal Amount");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(260, 290, 260, 30);

        jLabel4.setIcon(new javax.swing.ImageIcon("H:\\CSE\\Java Swing\\Project\\Banking_Management_System\\src\\Images\\atm.jpeg")); // NOI18N
        getContentPane().add(jLabel4);
        jLabel4.setBounds(0, -30, 900, 800);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String Amount, query;
        String SUrl, SUser, SPass;
        SUrl = "jdbc:MySQL://localhost:3306/banking_mangement_system";
        SUser = "root";
        SPass = "";
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection(SUrl, SUser, SPass);
            Statement st = con.createStatement();

            Amount = evt.getActionCommand();
            Date date = new Date();
            String getTotalDepositedQuery = "SELECT SUM(Amount) AS TotalDeposited FROM bank WHERE Acount_No = '" + accountNumber + "' AND Type = 'Deposit'";
            ResultSet depositedResult = st.executeQuery(getTotalDepositedQuery);

            int totalDepositedAmount = 0;
            if (depositedResult.next()) {
                totalDepositedAmount = depositedResult.getInt("TotalDeposited");
            }

            // Fetch the current total withdrawn amount for the account
            String getTotalWithdrawnQuery = "SELECT SUM(Amount) AS TotalWithdrawn FROM bank WHERE Acount_No = '" + accountNumber + "' AND Type = 'Withdraw'";
            ResultSet withdrawnResult = st.executeQuery(getTotalWithdrawnQuery);

            int totalWithdrawnAmount = 0;
            if (withdrawnResult.next()) {
                totalWithdrawnAmount = withdrawnResult.getInt("TotalWithdrawn");
            }

            // Calculate the new total amount after deposit
            int WithdrawAmount = Integer.parseInt(Amount);
            int newTotalAmount = totalDepositedAmount - (totalWithdrawnAmount + WithdrawAmount);
            if (newTotalAmount < WithdrawAmount) {
                JOptionPane.showMessageDialog(null, "Insuffient Balance");
            } // Update the total amount in the database
            else {
                query = "INSERT INTO bank(Acount_No, Pin, Date, Type, Amount, Total_Amount)"
                        + "VALUES('" + accountNumber + "', '" + pin + "' , '" + date + "' , '" + "Withdraw" + "' , '" + WithdrawAmount + "' , '" + newTotalAmount + "')";
                st.execute(query);

                JOptionPane.showMessageDialog(null, "Rs. " + Amount + " Withdraw Successfully");
                Tranjection tranjection = new Tranjection(accountNumber, pin);
                tranjection.setVisible(true);
                tranjection.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                tranjection.setTitle("Home");
                tranjection.pack();
                tranjection.setLocationRelativeTo(null);
                this.dispose();
            }

        } catch (Exception e) {
            System.out.println("Error!" + e.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String Amount, query;
        String SUrl, SUser, SPass;
        SUrl = "jdbc:MySQL://localhost:3306/banking_mangement_system";
        SUser = "root";
        SPass = "";
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection(SUrl, SUser, SPass);
            Statement st = con.createStatement();

            Amount = evt.getActionCommand();
            Date date = new Date();
            String getTotalDepositedQuery = "SELECT SUM(Amount) AS TotalDeposited FROM bank WHERE Acount_No = '" + accountNumber + "' AND Type = 'Deposit'";
            ResultSet depositedResult = st.executeQuery(getTotalDepositedQuery);

            int totalDepositedAmount = 0;
            if (depositedResult.next()) {
                totalDepositedAmount = depositedResult.getInt("TotalDeposited");
            }

            // Fetch the current total withdrawn amount for the account
            String getTotalWithdrawnQuery = "SELECT SUM(Amount) AS TotalWithdrawn FROM bank WHERE Acount_No = '" + accountNumber + "' AND Type = 'Withdraw'";
            ResultSet withdrawnResult = st.executeQuery(getTotalWithdrawnQuery);

            int totalWithdrawnAmount = 0;
            if (withdrawnResult.next()) {
                totalWithdrawnAmount = withdrawnResult.getInt("TotalWithdrawn");
            }

            // Calculate the new total amount after deposit
            int WithdrawAmount = Integer.parseInt(Amount);
            int newTotalAmount = totalDepositedAmount - (totalWithdrawnAmount + WithdrawAmount);

            if (newTotalAmount < WithdrawAmount) {
                JOptionPane.showMessageDialog(null, "Insuffient Balance");
            } // Update the total amount in the database
            else {
                query = "INSERT INTO bank(Acount_No, Pin, Date, Type, Amount, Total_Amount)"
                        + "VALUES('" + accountNumber + "', '" + pin + "' , '" + date + "' , '" + "Withdraw" + "' , '" + WithdrawAmount + "' , '" + newTotalAmount + "')";
                st.execute(query);

                JOptionPane.showMessageDialog(null, "Rs. " + Amount + " Withdraw Successfully");
                Tranjection tranjection = new Tranjection(accountNumber, pin);
                tranjection.setVisible(true);
                tranjection.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                tranjection.setTitle("Home");
                tranjection.pack();
                tranjection.setLocationRelativeTo(null);
                this.dispose();
            }

        } catch (Exception e) {
            System.out.println("Error!" + e.getMessage());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String Amount, query;
        String SUrl, SUser, SPass;
        SUrl = "jdbc:MySQL://localhost:3306/banking_mangement_system";
        SUser = "root";
        SPass = "";
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection(SUrl, SUser, SPass);
            Statement st = con.createStatement();

            Amount = evt.getActionCommand();
            Date date = new Date();
            String getTotalDepositedQuery = "SELECT SUM(Amount) AS TotalDeposited FROM bank WHERE Acount_No = '" + accountNumber + "' AND Type = 'Deposit'";
            ResultSet depositedResult = st.executeQuery(getTotalDepositedQuery);

            int totalDepositedAmount = 0;
            if (depositedResult.next()) {
                totalDepositedAmount = depositedResult.getInt("TotalDeposited");
            }

            // Fetch the current total withdrawn amount for the account
            String getTotalWithdrawnQuery = "SELECT SUM(Amount) AS TotalWithdrawn FROM bank WHERE Acount_No = '" + accountNumber + "' AND Type = 'Withdraw'";
            ResultSet withdrawnResult = st.executeQuery(getTotalWithdrawnQuery);

            int totalWithdrawnAmount = 0;
            if (withdrawnResult.next()) {
                totalWithdrawnAmount = withdrawnResult.getInt("TotalWithdrawn");
            }

            // Calculate the new total amount after deposit
            int WithdrawAmount = Integer.parseInt(Amount);
            int newTotalAmount = totalDepositedAmount - (totalWithdrawnAmount + WithdrawAmount);
            if (newTotalAmount < WithdrawAmount) {
                JOptionPane.showMessageDialog(null, "Insuffient Balance");
            } // Update the total amount in the database
            else {
                query = "INSERT INTO bank(Acount_No, Pin, Date, Type, Amount, Total_Amount)"
                        + "VALUES('" + accountNumber + "', '" + pin + "' , '" + date + "' , '" + "Withdraw" + "' , '" + WithdrawAmount + "' , '" + newTotalAmount + "')";
                st.execute(query);

                JOptionPane.showMessageDialog(null, "Rs. " + Amount + " Withdraw Successfully");
                Tranjection tranjection = new Tranjection(accountNumber, pin);
                tranjection.setVisible(true);
                tranjection.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                tranjection.setTitle("NS Bank");
                tranjection.pack();
                tranjection.setLocationRelativeTo(null);
                this.dispose();
            }

        } catch (Exception e) {
            System.out.println("Error!" + e.getMessage());
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        String Amount, query;
        String SUrl, SUser, SPass;
        SUrl = "jdbc:MySQL://localhost:3306/banking_mangement_system";
        SUser = "root";
        SPass = "";
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection(SUrl, SUser, SPass);
            Statement st = con.createStatement();

            Amount = evt.getActionCommand();
            Date date = new Date();
            String getTotalDepositedQuery = "SELECT SUM(Amount) AS TotalDeposited FROM bank WHERE Acount_No = '" + accountNumber + "' AND Type = 'Deposit'";
            ResultSet depositedResult = st.executeQuery(getTotalDepositedQuery);

            int totalDepositedAmount = 0;
            if (depositedResult.next()) {
                totalDepositedAmount = depositedResult.getInt("TotalDeposited");
            }

            // Fetch the current total withdrawn amount for the account
            String getTotalWithdrawnQuery = "SELECT SUM(Amount) AS TotalWithdrawn FROM bank WHERE Acount_No = '" + accountNumber + "' AND Type = 'Withdraw'";
            ResultSet withdrawnResult = st.executeQuery(getTotalWithdrawnQuery);

            int totalWithdrawnAmount = 0;
            if (withdrawnResult.next()) {
                totalWithdrawnAmount = withdrawnResult.getInt("TotalWithdrawn");
            }

            // Calculate the new total amount after deposit
            int WithdrawAmount = Integer.parseInt(Amount);
            int newTotalAmount = totalDepositedAmount - (totalWithdrawnAmount + WithdrawAmount);
            if (newTotalAmount < WithdrawAmount) {
                JOptionPane.showMessageDialog(null, "Insuffient Balance");
            } // Update the total amount in the database
            else {
                query = "INSERT INTO bank(Acount_No, Pin, Date, Type, Amount, Total_Amount)"
                        + "VALUES('" + accountNumber + "', '" + pin + "' , '" + date + "' , '" + "Withdraw" + "' , '" + WithdrawAmount + "' , '" + newTotalAmount + "')";
                st.execute(query);

                JOptionPane.showMessageDialog(null, "Rs. " + Amount + " Withdraw Successfully");

                Tranjection tranjection = new Tranjection(accountNumber, pin);
                tranjection.setVisible(true);
                tranjection.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                tranjection.setTitle("Home");
                tranjection.pack();
                tranjection.setLocationRelativeTo(null);
                this.dispose();
            }

        } catch (Exception e) {
            System.out.println("Error!" + e.getMessage());
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        String Amount, query;
        String SUrl, SUser, SPass;
        SUrl = "jdbc:MySQL://localhost:3306/banking_mangement_system";
        SUser = "root";
        SPass = "";
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection(SUrl, SUser, SPass);
            Statement st = con.createStatement();

            Amount = evt.getActionCommand();
            Date date = new Date();
            String getTotalDepositedQuery = "SELECT SUM(Amount) AS TotalDeposited FROM bank WHERE Acount_No = '" + accountNumber + "' AND Type = 'Deposit'";
            ResultSet depositedResult = st.executeQuery(getTotalDepositedQuery);

            int totalDepositedAmount = 0;
            if (depositedResult.next()) {
                totalDepositedAmount = depositedResult.getInt("TotalDeposited");
            }

            // Fetch the current total withdrawn amount for the account
            String getTotalWithdrawnQuery = "SELECT SUM(Amount) AS TotalWithdrawn FROM bank WHERE Acount_No = '" + accountNumber + "' AND Type = 'Withdraw'";
            ResultSet withdrawnResult = st.executeQuery(getTotalWithdrawnQuery);

            int totalWithdrawnAmount = 0;
            if (withdrawnResult.next()) {
                totalWithdrawnAmount = withdrawnResult.getInt("TotalWithdrawn");
            }

            // Calculate the new total amount after deposit
            int WithdrawAmount = Integer.parseInt(Amount);
            int newTotalAmount = totalDepositedAmount - (totalWithdrawnAmount + WithdrawAmount);
            if (newTotalAmount < WithdrawAmount) {
                JOptionPane.showMessageDialog(null, "Insuffient Balance");
            } // Update the total amount in the database
            else {
                query = "INSERT INTO bank(Acount_No, Pin, Date, Type, Amount, Total_Amount)"
                        + "VALUES('" + accountNumber + "', '" + pin + "' , '" + date + "' , '" + "Withdraw" + "' , '" + WithdrawAmount + "' , '" + newTotalAmount + "')";
                st.execute(query);

                JOptionPane.showMessageDialog(null, "Rs. " + Amount + " Withdraw Successfully");
                Tranjection tranjection = new Tranjection(accountNumber, pin);
                tranjection.setVisible(true);
                tranjection.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                tranjection.setTitle("Home");
                tranjection.pack();
                tranjection.setLocationRelativeTo(null);
                this.dispose();
            }

        } catch (Exception e) {
            System.out.println("Error!" + e.getMessage());
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        String Amount, query;
        String SUrl, SUser, SPass;
        SUrl = "jdbc:MySQL://localhost:3306/banking_mangement_system";
        SUser = "root";
        SPass = "";
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection(SUrl, SUser, SPass);
            Statement st = con.createStatement();

            Amount = evt.getActionCommand();
            Date date = new Date();
            String getTotalDepositedQuery = "SELECT SUM(Amount) AS TotalDeposited FROM bank WHERE Acount_No = '" + accountNumber + "' AND Type = 'Deposit'";
            ResultSet depositedResult = st.executeQuery(getTotalDepositedQuery);

            int totalDepositedAmount = 0;
            if (depositedResult.next()) {
                totalDepositedAmount = depositedResult.getInt("TotalDeposited");
            }

            // Fetch the current total withdrawn amount for the account
            String getTotalWithdrawnQuery = "SELECT SUM(Amount) AS TotalWithdrawn FROM bank WHERE Acount_No = '" + accountNumber + "' AND Type = 'Withdraw'";
            ResultSet withdrawnResult = st.executeQuery(getTotalWithdrawnQuery);

            int totalWithdrawnAmount = 0;
            if (withdrawnResult.next()) {
                totalWithdrawnAmount = withdrawnResult.getInt("TotalWithdrawn");
            }

            // Calculate the new total amount after deposit
            int WithdrawAmount = Integer.parseInt(Amount);
            int newTotalAmount = totalDepositedAmount - (totalWithdrawnAmount + WithdrawAmount);
            if (newTotalAmount < WithdrawAmount) {
                JOptionPane.showMessageDialog(null, "Insuffient Balance");
            } // Update the total amount in the database
            else {
                query = "INSERT INTO bank(Acount_No, Pin, Date, Type, Amount, Total_Amount)"
                        + "VALUES('" + accountNumber + "', '" + pin + "' , '" + date + "' , '" + "Withdraw" + "' , '" + WithdrawAmount + "' , '" + newTotalAmount + "')";
                st.execute(query);

                JOptionPane.showMessageDialog(null, "Rs. " + Amount + " Withdraw Successfully");
                Tranjection tranjection = new Tranjection(accountNumber, pin);
                tranjection.setVisible(true);
                tranjection.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                tranjection.setTitle("NS Bank");
                tranjection.pack();
                tranjection.setLocationRelativeTo(null);
                this.dispose();
            }

        } catch (Exception e) {
            System.out.println("Error!" + e.getMessage());
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        Tranjection tranjection = new Tranjection(accountNumber, pin);
        tranjection.setVisible(true);
        tranjection.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        tranjection.setTitle("NS Bank");
        tranjection.pack();
        tranjection.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_jButton7ActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables
}
